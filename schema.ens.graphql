#import { Module, Connection } into Ethereum from "wrap://ens/ethereum.polywrap.eth"
#import { Module } into UTS46 from "wrap://ens/uts46.polywrap.eth"
#import { Module } into SHA3 from "wrap://ens/sha3.polywrap.eth"

type Module {
  getResolver(
    registryAddress: String!
    domain: String!
    connection: Ethereum_Connection
  ): String!

  getOwner(
    domain: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): String!

  checkIfRecordExists(
    domain: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): Boolean!

  getAddress(
    domain: String!
    resolverAddress: String!
    connection: Ethereum_Connection
  ): String!

  getAddressFromDomain(
    domain: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): String!

  getContentHash(
    domain: String!
    resolverAddress: String!
    connection: Ethereum_Connection
  ): String!

  getContentHashFromDomain(
    domain: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): String!

  getExpiryTimes(
    domain: String!
    registrarAddress: String!
    connection: Ethereum_Connection
  ): String!

  getReverseResolver(
    address: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): String!

  getNameFromReverseResolver(
    address: String!
    resolverAddress: String!
    connection: Ethereum_Connection
  ): String!

  getNameFromAddress(
    address: String!
    registryAddress: String!
    connection: Ethereum_Connection
  ): String!

  getTextRecord(
    domain: String!
    resolverAddress: String!
    key: String!
    connection: Ethereum_Connection
  ): String!

  setResolver(
    domain: String!
    resolverAddress: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  registerDomain(
    domain: String!
    registrarAddress: String!
    registryAddress: String!
    owner: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  reverseRegisterDomain(
    domain: String!
    reverseRegistryAddress: String!
    owner: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setName(
    domain: String!
    reverseRegistryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setAddress(
    domain: String!
    address: String!
    resolverAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setOwner(
    domain: String!
    newOwner: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setSubdomainOwner(
    subdomain: String!
    owner: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setRecord(
    domain: String!
    owner: String!
    resolverAddress: String!
    ttl: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setSubdomainRecord(
    domain: String!
    label: String!
    owner: String!
    resolverAddress: String!
    ttl: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  registerSubdomainsRecursively(
    domain: String!
    owner: String!
    resolverAddress: String!
    ttl: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): [RegistrationResult!]!

  registerDomainAndSubdomainsRecursively(
    domain: String!
    owner: String!
    resolverAddress: String!
    ttl: String!
    registrarAddress: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): [RegistrationResult!]!

  setContentHash(
    domain: String!
    cid: String!
    resolverAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setAddressFromDomain(
    domain: String!
    address: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setContentHashFromDomain(
    domain: String!
    cid: String!
    registryAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  deployFIFSRegistrar(
    registryAddress: String!
    tld: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): String!

  registerSubnodeOwnerWithFIFSRegistrar(
    label: String!
    owner: String!
    fifsRegistrarAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  setTextRecord(
    domain: String!
    resolverAddress: String!
    key: String!
    value: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): Ethereum_TxResponse!

  configureOpenDomain(
    tld: String!
    owner: String!
    registryAddress: String!
    resolverAddress: String!
    registrarAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): ConfigureOpenDomainResponse!

  createSubdomainInOpenDomain(
    label: String!
    domain: String!
    owner: String!
    fifsRegistrarAddress: String!
    registryAddress: String!
    resolverAddress: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): CreateSubdomainInOpenDomainResponse!

  createSubdomainInOpenDomainAndSetContentHash(
    label: String!
    domain: String!
    owner: String!
    fifsRegistrarAddress: String!
    registryAddress: String!
    resolverAddress: String!
    cid: String!
    connection: Ethereum_Connection
    txOptions: TxOptions
  ): CreateSubdomainInOpenDomainAndSetContentHashResponse
}

type ConfigureOpenDomainResponse {
  fifsRegistrarAddress: String!
  registerOpenDomainTxReceipt: Ethereum_TxResponse!
  setSubdomainRecordTxReceipt: Ethereum_TxResponse!
}

type CreateSubdomainInOpenDomainResponse {
  registerSubdomainTxReceipt: Ethereum_TxResponse!
  setResolverTxReceipt: Ethereum_TxResponse!
}

type CreateSubdomainInOpenDomainAndSetContentHashResponse implements CreateSubdomainInOpenDomainResponse {
  setContentHashReceiptTx: Ethereum_TxResponse!
}

type RegistrationResult {
  name: String!
  didRegister: Boolean!
  tx: Ethereum_TxResponse
}

type TxOptions {
  """Gas supplied for the transaction"""
  gasLimit: BigInt
  """
  The max total fee to pay per unit of gas.
  The difference between maxFeePerGas and baseFeePerGas + maxPriorityFeePerGas is “refunded” to the user.
  This property is ignored when gasPrice is not null.
  """
  maxFeePerGas: BigInt
  """
  The gas price paid is baseFeePerGas + maxPriorityFeePerGas.
  The difference between maxFeePerGas and baseFeePerGas + maxPriorityFeePerGas is “refunded” to the user.
  This property is ignored when gasPrice is not null.
  """
  maxPriorityFeePerGas: BigInt
  """
  The gas price for legacy transactions.
  If this property is not null, a legacy transaction will be sent and maxFeePerGas and maxPriorityFeePerGas will be ignored.
  """
  gasPrice: BigInt
  """Override default nonce"""
  nonce: UInt32
}
